# Workflow Name
name: Infrastructure and Application Deploy

# workflow run on:
on:
  push:
    # on pushes to main branch
    branches: [ main ]
    # Only trigger when these paths change
    paths:
      - 'terraform/**'    # in infrastructure code
      - 'app/**'          # in app code
      - 'helm/**'         # in Helm charts
      - '.github/workflows/**'  # Changes in workflows

# Environment variables
env:
  AWS_REGION: us-east-1  # AWS region
  TF_VAR_environment: dev  # Terraform environment

# permissions for the GitHub Actions runner
permissions:
  id-token: write    # AWS OIDC authentication
  contents: read     # Needed to checkout code

# List of jobs
jobs:
  # Deploy infrastructure
  terraform:
    runs-on: ubuntu-latest
    steps:
      # Get code from GitHub
      - name: Checkout code
        uses: actions/checkout@v3

      #Using Access Keys
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      # Install Terraform
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.0

      # Check and run Bootstrap Terraform backend only if needed
      - name: Check and Bootstrap Terraform Backend
        id: bootstrap
        working-directory: terraform/bootstrap
        env:
          TF_VAR_aws_access_key_id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          TF_VAR_aws_secret_access_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        run: |
          # Check if terraform-lock table exists
          if aws dynamodb describe-table --table-name terraform-lock 2>/dev/null; then
            echo "Bootstrap was already run - getting existing bucket name..."
            BUCKET_NAME=$(aws s3 ls | grep lawyal-terraform-state | awk '{print $3}')
            if [ -z "$BUCKET_NAME" ]; then
              echo "Error: Could not find terraform state bucket"
              exit 1
            fi
          else
            echo "Running bootstrap..."
            terraform init
            terraform apply -auto-approve
            BUCKET_NAME=$(terraform output -raw state_bucket_name)
          fi
          
          echo "Using bucket: ${BUCKET_NAME}"
          # Set output for other steps
          echo "bucket_name=${BUCKET_NAME}" >> $GITHUB_OUTPUT

      # Configure and initialize backend for main Terraform
      - name: Configure and Init Terraform Backend
        working-directory: terraform
        run: |
          echo "=== Creating backend.tf ==="
          cat > backend.tf << EOF
          terraform {
            backend "s3" {
              bucket         = "${{ steps.bootstrap.outputs.bucket_name }}"
              key            = "terraform.tfstate"
              region         = "us-east-1"
              encrypt        = true
              dynamodb_table = "terraform-lock"
            }
          }
          EOF
          
          echo "=== Current backend.tf content ==="
          cat backend.tf
          
          echo "=== Initializing Terraform with new backend ==="
          terraform init -reconfigure

      # Now verify the backend configuration
      - name: Verify Backend Configuration
        working-directory: terraform
        run: |
          echo "=== Verifying backend access ==="
          terraform state list || echo "No state exists yet (this is expected for first run)"
          
          echo "=== Verifying S3 bucket access ==="
          aws s3 ls "s3://${{ steps.bootstrap.outputs.bucket_name }}/" || echo "Bucket is empty (this is expected for first run)"

      # Terraform apply main infrastructure
      - name: Apply main Infrastructure
        working-directory: terraform
        run: terraform apply -auto-approve
        env:
          TF_VAR_aws_access_key_id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          TF_VAR_aws_secret_access_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

  # Build and deploy app
  deploy-app:
    needs: terraform  # Wait for infrastructure to complete
    runs-on: ubuntu-latest  
    steps:
      # Get code from GitHub
      - name: Checkout code
        uses: actions/checkout@v3

      # Set up AWS credentials using access keys
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
        env:
          TF_VAR_aws_access_key_id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          TF_VAR_aws_secret_access_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      # Log in to ECR
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      # Build and push Docker image
      - name: Build and push Docker image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}  # ECR registry URL
          ECR_REPOSITORY: ly-flask-app-repo                      # repo name
          IMAGE_TAG: ${{ github.sha }}                          # Use commit SHA as tag
        run: |
          cd app
          # Build image with commit SHA tag
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          # Push image with commit SHA tag
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          # Also tag as latest
          docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:latest
          # Push latest tag
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest

      # Deploy to EKS using Helm
      - name: Deploy to EKS
        run: |
          # Update kubeconfig for EKS cluster access
          aws eks update-kubeconfig --name lawyal-project-eks-cluster --region ${{ env.AWS_REGION }}
          
          cd helm
          # Get ECR repository URL
          ECR_REPO=$(aws ecr describe-repositories --repository-names ly-flask-app-repo --query 'repositories[0].repositoryUri' --output text)
          
          # Deploy/upgrade using Helm
          helm upgrade --install flask-app ./flask-app \
            --set image.repository=$ECR_REPO \
            --set image.tag=${{ github.sha }} \
            --wait --timeout 5m

      # Deploy monitoring stack
      - name: Deploy Monitoring Stack
        run: |
          cd helm
          ./deploy-monitoring.sh

      # Get and display all relevant URLs and information
      - name: Display Access Information
        run: |
          echo "=== Application Access Information ==="
          echo "Waiting for Load Balancer URLs (this may take a few minutes)..."
          
          # Get Application Load Balancer URL
          APP_URL=""
          ATTEMPTS=0
          while [ -z "$APP_URL" ] && [ $ATTEMPTS -lt 30 ]; do
            APP_URL=$(kubectl get svc flask-app-flask-app -o jsonpath="{.status.loadBalancer.ingress[0].hostname}")
            if [ -z "$APP_URL" ]; then
              ATTEMPTS=$((ATTEMPTS+1))
              echo "Waiting for Application LB URL... (Attempt $ATTEMPTS/30)"
              sleep 10
            fi
          done
          
          # Get Grafana Load Balancer URL
          GRAFANA_URL=""
          ATTEMPTS=0
          while [ -z "$GRAFANA_URL" ] && [ $ATTEMPTS -lt 30 ]; do
            GRAFANA_URL=$(kubectl get svc -n monitoring monitoring-grafana -o jsonpath="{.status.loadBalancer.ingress[0].hostname}")
            if [ -z "$GRAFANA_URL" ]; then
              ATTEMPTS=$((ATTEMPTS+1))
              echo "Waiting for Grafana LB URL... (Attempt $ATTEMPTS/30)"
              sleep 10
            fi
          done

          # Create a summary with all access information
          echo ""
          echo "=== üöÄ Deployment Complete! ==="
          echo ""
          echo "üì± Application URL: http://$APP_URL"
          echo ""
          echo "üìä Monitoring Information:"
          echo "- Grafana URL: http://$GRAFANA_URL"
          echo "- Grafana Login:"
          echo "  ‚Ä¢ Username: admin"
          echo "  ‚Ä¢ Password: admin"
          echo ""
          echo "üîç Useful Commands:"
          echo "- Check application pods: kubectl get pods"
          echo "- Check monitoring pods: kubectl get pods -n monitoring"
          echo "- View app logs: kubectl logs -l app=flask-app"
          echo ""
          echo "üìà Monitoring Dashboard:"
          echo "1. Open Grafana URL: http://$GRAFANA_URL"
          echo "2. Login with credentials above"
          echo "3. Go to Dashboards -> Browse -> Flask App Dashboard"
          echo ""
          echo "‚ö†Ô∏è Note: Please change the Grafana admin password on first login"
          
          # Save URLs as GitHub output variables
          echo "app_url=http://$APP_URL" >> $GITHUB_OUTPUT
          echo "grafana_url=http://$GRAFANA_URL" >> $GITHUB_OUTPUT

      # Optional: Add a step to verify the endpoints are responding
      - name: Verify Endpoints
        run: |
          echo "Verifying endpoints are responding..."
          
          APP_URL=$(kubectl get svc flask-app-flask-app -o jsonpath="{.status.loadBalancer.ingress[0].hostname}")
          GRAFANA_URL=$(kubectl get svc -n monitoring monitoring-grafana -o jsonpath="{.status.loadBalancer.ingress[0].hostname}")
          
          # Wait for DNS propagation and services to be ready
          sleep 30
          
          # Check if endpoints are responding
          curl -f -s -o /dev/null "http://$APP_URL" || echo "‚ö†Ô∏è Warning: Application endpoint not responding yet"
          curl -f -s -o /dev/null "http://$GRAFANA_URL" || echo "‚ö†Ô∏è Warning: Grafana endpoint not responding yet"
